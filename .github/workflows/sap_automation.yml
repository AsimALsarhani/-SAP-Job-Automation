name: SAP Automation

on:
  schedule:
    - cron: "0 * * * *"  # Hourly execution
  workflow_dispatch:     # Manual trigger

jobs:
  execute-job:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install ChromeDriver
        run: |
          # Get the full Chrome version string (e.g. "134.0.6998.165")
          CHROME_FULL_VERSION=$(google-chrome --version | awk '{print $3}')
          # Extract the major version number (e.g. "134")
          CHROME_MAJOR_VERSION=$(echo $CHROME_FULL_VERSION | cut -d. -f1)
          echo "Chrome full version: $CHROME_FULL_VERSION"
          echo "Chrome major version: $CHROME_MAJOR_VERSION"
          # Get the matching ChromeDriver version using the major version
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION}")
          # Check if the returned string contains an error and fallback if needed
          if echo "$CHROMEDRIVER_VERSION" | grep -qi "error"; then
            echo "ChromeDriver version for Chrome major version ${CHROME_MAJOR_VERSION} not found. Falling back to latest available version."
            CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE")
          fi
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          wget -N "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install selenium

      - name: Run Automation
        env:
          SAP_USERNAME: ${{ secrets.SAP_USERNAME }}
          SAP_PASSWORD: ${{ secrets.SAP_PASSWORD }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
          SAP_URL: ${{ secrets.SAP_URL }}
        run: |
          set -x  # Enable detailed logging
          python automation.py || { echo 'Automation script failed'; exit 1; }
