name: SAP Automation (SAP_URL only, stable Chrome + connectivity check)

on:
  workflow_dispatch:
  schedule:
    - cron: "10 * * * *"   # hourly at :10

concurrency:
  group: sap-automation-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  TZ: Asia/Riyadh
  PYTHONUNBUFFERED: "1"

jobs:
  run:
    runs-on: ubuntu-22.04
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Use STABLE Chrome instead of Canary Chromium
      - name: Install Google Chrome (stable)
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-dependencies: true

      - name: Show versions (debug)
        run: |
          python -V
          pip --version
          chrome --version || google-chrome --version || chromium --version || true

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Verify required secrets
        env:
          SAP_USERNAME: ${{ secrets.SAP_USERNAME }}
          SAP_PASSWORD: ${{ secrets.SAP_PASSWORD }}
          SAP_URL: ${{ secrets.SAP_URL }}
        run: |
          missing=0
          for v in SAP_USERNAME SAP_PASSWORD SAP_URL; do
            if [ -z "${!v}" ]; then
              echo "::error::Missing required secret: $v"
              missing=1
            fi
          done
          exit $missing

      # Quick network preflight so you immediately see if the runner can reach SAP_URL
      - name: Connectivity check to SAP_URL host
        env:
          SAP_URL: ${{ secrets.SAP_URL }}
        run: |
          set -e
          python - <<'PY'
          import os, sys, urllib.parse, subprocess
          url = os.environ["SAP_URL"]
          host = urllib.parse.urlparse(url).hostname
          if not host:
            print("Could not parse host from SAP_URL", file=sys.stderr); sys.exit(1)
          print(f"Checking reachability to host: {host}")
          # DNS + TCP (curl HEAD, 15s) — this will NOT leak headers/body
          rc = subprocess.call(["curl","-I","--max-time","15","--silent","--show-error", f"https://{host}"])
          if rc != 0:
            print("⚠️ Host not reachable from GitHub runner (VPN/SSO/WAF likely required).", file=sys.stderr)
            sys.exit(0)  # don't fail yet; script will still run and capture artifacts
          PY

      - name: Prepare artifact folders
        run: mkdir -p artifacts screenshots logs

      - name: Run automation.py
        env:
          SAP_USERNAME: ${{ secrets.SAP_USERNAME }}
          SAP_PASSWORD: ${{ secrets.SAP_PASSWORD }}
          SAP_URL: ${{ secrets.SAP_URL }}
          # Set this to 'true' in repo secrets if your TLS is via corp CA
          ALLOW_INSECURE_CERTS: ${{ secrets.ALLOW_INSECURE_CERTS }}
          DISPLAY: ":99"
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          set -e
          python automation.py 2>&1 | tee logs/run.log

      - name: Upload artifacts (screenshots/logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sap-artifacts
          path: |
            artifacts/**
            screenshots/**
            logs/**
          if-no-files-found: ignore
