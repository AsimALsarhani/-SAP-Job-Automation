# .github/workflows/sap_automation.yml
name: SAP Automation

on:
  schedule:
    - cron: "0 * * * *"  # Hourly execution
  workflow_dispatch:      # Manual trigger

jobs:
  execute-job:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Updated checkout action version

      - name: Set up Python 3.10
        uses: actions/setup-python@v5 # Updated setup-python action version
        with:
          python-version: '3.10'

      - name: Install Google Chrome and dependencies
        run: |
          sudo apt-get update
          # Install Chrome and jq (for parsing JSON)
          sudo apt-get install -y google-chrome-stable jq

      # --- Start of Modified Step ---
      - name: Install ChromeDriver matching INSTALLED Chrome version
        run: |
          # Get the EXACT installed Chrome version
          INSTALLED_CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
          if [ -z "$INSTALLED_CHROME_VERSION" ]; then
            echo "Could not determine installed Chrome version. Exiting."
            exit 1
          fi
          echo "Installed Chrome version: $INSTALLED_CHROME_VERSION"

          # Fetch the ChromeDriver download URL specifically for the INSTALLED Chrome version
          # Uses the latest-patch-versions-per-build endpoint which maps full Chrome versions to ChromeDriver downloads
          CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build.json" | jq -r --arg ver "$INSTALLED_CHROME_VERSION" '.builds[$ver].downloads.chromedriver[] | select(.platform=="linux64") | .url')

          # Check if the URL was found
          if [ -z "$CHROMEDRIVER_URL" ] || [ "$CHROMEDRIVER_URL" == "null" ]; then
            echo "ERROR: Could not find ChromeDriver download URL for Chrome version $INSTALLED_CHROME_VERSION."
            echo "Attempting fallback to latest stable ChromeDriver..."
            # Fallback: Get the latest stable ChromeDriver URL (original method)
            CHROMEDRIVER_URL=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json | jq -r '.channels.Stable.downloads.chromedriver[] | select(.platform=="linux64") | .url')

            if [ -z "$CHROMEDRIVER_URL" ] || [ "$CHROMEDRIVER_URL" == "null" ]; then
               echo "ERROR: Fallback failed. Could not determine any ChromeDriver URL. Exiting."
               exit 1
            fi
             echo "Using fallback ChromeDriver URL (latest stable): $CHROMEDRIVER_URL"
          else
            echo "Found specific ChromeDriver URL: $CHROMEDRIVER_URL"
          fi

          # Download, unzip, and install ChromeDriver
          wget -N "$CHROMEDRIVER_URL" -O chromedriver_linux64.zip
          unzip chromedriver_linux64.zip -d /tmp/chromedriver_extracted # Unzip to a temporary specific directory

          # Find the chromedriver binary within the extracted directory structure
          CHROME_DRIVER_BINARY=$(find /tmp/chromedriver_extracted -type f -name chromedriver | head -n 1)

          if [ -z "$CHROME_DRIVER_BINARY" ]; then
             echo "ERROR: Could not find 'chromedriver' binary after unzip."
             ls -la /tmp/chromedriver_extracted # List extracted files for debugging
             exit 1
          fi

          echo "Moving $CHROME_DRIVER_BINARY to /usr/bin/chromedriver"
          sudo mv "$CHROME_DRIVER_BINARY" /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver

          # Clean up
          rm chromedriver_linux64.zip
          rm -rf /tmp/chromedriver_extracted

          # Verify installation
          echo "Verifying ChromeDriver installation..."
          chromedriver --version
      # --- End of Modified Step ---

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          # Make sure requirements.txt exists and lists selenium
          if [ -f requirements.txt ]; then
             pip install -r requirements.txt
          else
             echo "requirements.txt not found, installing selenium directly"
             pip install selenium
          fi

      - name: Run Automation
        env:
          SAP_USERNAME: ${{ secrets.SAP_USERNAME }}
          SAP_PASSWORD: ${{ secrets.SAP_PASSWORD }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
          SAP_URL: ${{ secrets.SAP_URL }}
        run: |
          set -x  # Enable detailed logging
          python automation.py || { echo 'Automation script failed'; exit 1; }
