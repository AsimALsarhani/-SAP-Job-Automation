# .github/workflows/sap_automation.yml
name: SAP Automation

on:
  schedule:
    - cron: "0 * * * *"  # Hourly execution
  workflow_dispatch:      # Manual trigger

jobs:
  execute-job:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Google Chrome and dependencies
        run: |
          sudo apt-get update
          # Install Chrome and jq
          sudo apt-get install -y google-chrome-stable jq

      # --- Start of Corrected Step with Milestone Fallback ---
      - name: Install ChromeDriver matching INSTALLED Chrome version (Milestone Fallback)
        run: |
          # Get the EXACT installed Chrome version
          INSTALLED_CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
          if [ -z "$INSTALLED_CHROME_VERSION" ]; then
            echo "ERROR: Could not determine installed Chrome version. Exiting."
            exit 1
          fi
          echo "DEBUG: Installed Chrome version: $INSTALLED_CHROME_VERSION"

          # Attempt to find the specific ChromeDriver URL using latest-patch-versions-per-build
          echo "DEBUG: Attempting to find specific ChromeDriver URL for $INSTALLED_CHROME_VERSION..."
          SPECIFIC_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build.json" | jq -r --arg ver "$INSTALLED_CHROME_VERSION" '.builds[$ver].downloads.chromedriver[] | select(.platform=="linux64") | .url' 2>/dev/null || true)
          JQ_EXIT_STATUS=${PIPESTATUS[1]} # Check jq's exit status

          echo "DEBUG: Result of specific URL lookup: '$SPECIFIC_URL'"
          echo "DEBUG: PIPESTATUS[1] (jq exit status for specific): $JQ_EXIT_STATUS"

          # Check if specific lookup failed (jq status or empty/null URL)
          if [ $JQ_EXIT_STATUS -ne 0 ] || [ -z "$SPECIFIC_URL" ] || [ "$SPECIFIC_URL" == "null" ]; then
            echo "DEBUG: Specific URL lookup failed (jq status: $JQ_EXIT_STATUS) or URL is empty/null. Triggering MILESTONE fallback."

            # --- Modified Fallback Logic ---
            INSTALLED_CHROME_MAJOR_VERSION=$(echo "$INSTALLED_CHROME_VERSION" | cut -d. -f1)
            echo "DEBUG: Extracted major version: $INSTALLED_CHROME_MAJOR_VERSION"
            echo "Attempting fallback to latest ChromeDriver for milestone $INSTALLED_CHROME_MAJOR_VERSION..."
            # Fallback: Get the latest ChromeDriver URL for the installed MAJOR version (milestone)
            FALLBACK_URL=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/latest-releases-per-milestone-with-downloads.json | jq -r --arg major "$INSTALLED_CHROME_MAJOR_VERSION" '.milestones[$major].downloads.chromedriver[] | select(.platform=="linux64") | .url' 2>/dev/null || true)
            FALLBACK_JQ_STATUS=${PIPESTATUS[1]} # Check jq status for milestone lookup
            echo "DEBUG: Result of milestone fallback URL lookup: '$FALLBACK_URL'"
            echo "DEBUG: PIPESTATUS[1] (milestone fallback jq status): $FALLBACK_JQ_STATUS"
            # --- End Modified Fallback Logic ---

            # Check if milestone fallback also failed
            if [ $FALLBACK_JQ_STATUS -ne 0 ] || [ -z "$FALLBACK_URL" ] || [ "$FALLBACK_URL" == "null" ]; then
               echo "ERROR: Milestone fallback failed (jq status: $FALLBACK_JQ_STATUS) or URL is empty/null. Could not determine any ChromeDriver URL. Exiting."
               # As a last resort, could try latest-stable again here, but it might cause the version mismatch.
               exit 1
            fi
             echo "DEBUG: Using milestone fallback ChromeDriver URL."
             CHROMEDRIVER_URL="$FALLBACK_URL"
          else
            echo "DEBUG: Using specific ChromeDriver URL found."
            CHROMEDRIVER_URL="$SPECIFIC_URL"
          fi

          echo "DEBUG: Final ChromeDriver URL to download: $CHROMEDRIVER_URL"

          # Download, unzip, and install ChromeDriver
          wget -N "$CHROMEDRIVER_URL" -O chromedriver_linux64.zip
          unzip chromedriver_linux64.zip -d /tmp/chromedriver_extracted

          CHROME_DRIVER_BINARY=$(find /tmp/chromedriver_extracted -type f -name chromedriver | head -n 1)

          if [ -z "$CHROME_DRIVER_BINARY" ]; then
             echo "ERROR: Could not find 'chromedriver' binary after unzip."
             ls -la /tmp/chromedriver_extracted
             exit 1
          fi

          echo "DEBUG: Moving $CHROME_DRIVER_BINARY to /usr/bin/chromedriver"
          sudo mv "$CHROME_DRIVER_BINARY" /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver

          # Clean up
          rm chromedriver_linux64.zip
          rm -rf /tmp/chromedriver_extracted

          # Verify installation
          echo "DEBUG: Verifying installed ChromeDriver version..."
          if ! CMD_OUTPUT=$(chromedriver --version 2>&1); then
             echo "WARN: 'chromedriver --version' command failed. Output: $CMD_OUTPUT"
          else
             echo "DEBUG: $(echo $CMD_OUTPUT)" # Print successful version output
          fi
      # --- End of Corrected Step with Milestone Fallback ---

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          # Make sure requirements.txt exists and lists selenium
          if [ -f requirements.txt ]; then
             pip install -r requirements.txt
          else
             echo "requirements.txt not found, installing selenium directly"
             pip install selenium
          fi

      - name: Run Automation
        env:
          SAP_USERNAME: ${{ secrets.SAP_USERNAME }}
          SAP_PASSWORD: ${{ secrets.SAP_PASSWORD }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
          SAP_URL: ${{ secrets.SAP_URL }}
        run: |
          set -x  # Enable detailed logging
          python automation.py || { echo 'Automation script failed'; exit 1; }
